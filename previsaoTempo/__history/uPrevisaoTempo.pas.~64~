unit uPrevisaoTempo;

interface

uses
  Windows, Messages, SysUtils, Variants, Classes, Graphics, Controls, Forms,
  Dialogs, StdCtrls, IdBaseComponent, IdComponent, IdTCPConnection, IdTCPClient,
  IdHTTP, xmldom, XMLIntf, msxmldom, XMLDoc, Buttons, DB, pngImage,
  ExtCtrls, ImgList, Vcl.WinXCtrls, acPNG, Vcl.ComCtrls;

type
  TForm1 = class(TForm)
    IdHTTP1: TIdHTTP;
    XMLDocument1: TXMLDocument;
    Panel1: TPanel;
    edt1: TEdit;
    grp1: TGroupBox;
    Label1: TLabel;
    Label2: TLabel;
    Label3: TLabel;
    Label4: TLabel;
    img1: TImage;
    grp2: TGroupBox;
    Label5: TLabel;
    Label6: TLabel;
    Label7: TLabel;
    Label8: TLabel;
    img2: TImage;
    grp3: TGroupBox;
    Label9: TLabel;
    Label10: TLabel;
    Label11: TLabel;
    Label12: TLabel;
    img3: TImage;
    grp4: TGroupBox;
    Label13: TLabel;
    Label14: TLabel;
    Label15: TLabel;
    Label16: TLabel;
    img4: TImage;
    Panel2: TPanel;
    Label17: TLabel;
    sv: TSplitView;
    Image1: TImage;
    Image2: TImage;
    SearchBox1: TSearchBox;
    ListView1: TListView;
    StatusBar1: TStatusBar;
    ComboBox1: TComboBox;
    procedure baixarXML(codCidade : String);
    procedure carregarXML();
    procedure Image1Click(Sender: TObject);
    procedure Image2Click(Sender: TObject);
    procedure FormShow(Sender: TObject);
    procedure carregarLocalidade();
    procedure ListView1SelectItem(Sender: TObject; Item: TListItem;
      Selected: Boolean);
    procedure atualizarDataHora();
    procedure SearchBox1InvokeSearch(Sender: TObject);
  private
    { Private declarations }
  public
    { Public declarations }
  end;

var
  Form1: TForm1;
  fileXML, fileXMLLoad, fileXMLLocal : TFileStream;
  xmlCidades : TMemoryStream;
  xmlCidade : TMemoryStream;
  cidadeUF : String;


implementation

{$R *.dfm}

{ TForm1 }

function retornarDiaDaSemana(data : String): String;
begin

  if (DayOfWeek(StrToDate(data)))    = 1 then
  Result := 'Domingo';
    if (DayOfWeek(StrToDate(data)))  = 2 then
  Result := 'Segunda-Feira';
    if (DayOfWeek(StrToDate(data)))  = 3 then
  Result := 'Terça-Feira';
    if (DayOfWeek(StrToDate(data)))  = 4 then
  Result := 'Quarta-Feira';
    if (DayOfWeek(StrToDate(data)))  = 5 then
  Result := 'Quinta-Feira';
    if (DayOfWeek(StrToDate(data)))  = 6 then
  Result := 'Sexta-Feira';
      if (DayOfWeek(StrToDate(data)))= 7 then
  Result := 'Sábado';

end;

function retornaCondicao(sigla : String): String;
begin

  if (sigla = 'ec') then
  Result := 'Encoberto com Chuvas Isoladas'
  else
  if (sigla = 'ci') then
  Result := 'Chuvas Isoladas'
    else
  if (sigla = 'c') then
  Result := 'Chuva';
  if (sigla = 'in') then
  Result := 'Instável';
  if (sigla = 'pp') then
  Result := 'Poss. de Pancadas de Chuva';
  if (sigla = 'cm') then
  Result := 'Chuva pela Manhã';
  if (sigla = 'cn') then
  Result := 'Chuva a Noite';
  if (sigla = 'pt') then
  Result := 'Pancadas de Chuva a Tarde';
  if (sigla = 'pm') then
  Result := 'Pancadas de Chuva pela Manhã';
  if (sigla = 'np') then
  Result := 'Nublado e Pancadas de Chuva';
  if (sigla = 'pc') then
  Result := 'Pancadas de Chuva';
  if (sigla = 'pn') then
  Result := 'Parcialmente Nublado';
  if (sigla = 'cv') then
  Result := 'Chuvisco';
  if (sigla = 'ch') then
  Result := 'Chuvoso';
  if (sigla = 't') then
  Result := 'Tempestade';
  if (sigla = 'ps') then
  Result := 'Predomínio de Sol';
  if (sigla = 'e') then
  Result := 'Encoberto';
  if (sigla = 'n') then
  Result := 'Nublado';
  if (sigla = 'cl') then
  Result := 'Céu Claro';
  if (sigla = 'nv') then
  Result := 'Nevoeiro';
  if (sigla = 'g') then
  Result := 'Geada';
  if (sigla = 'ne') then
  Result := 'Neve';
  if (sigla = 'nd') then
  Result := 'Não Definido';
  if (sigla = 'pnt') then
  Result := 'Pancadas de Chuva a Noite';
  if (sigla = 'psc') then
  Result := 'Possibilidade de Chuva';
  if (sigla = 'pcm') then
  Result := 'Possibilidade de Chuva pela Manhã';
  if (sigla = 'pct') then
  Result := 'Possibilidade de Chuva a Tarde';
  if (sigla = 'pcn') then
  Result := 'Possibilidade de Chuva a Noite';
  if (sigla = 'npt') then
  Result := 'Nublado com Pancadas a Tarde';
  if (sigla = 'npn') then
  Result := 'Nublado com Pancadas a Noite';
  if (sigla = 'ncn') then
  Result := 'Nublado com Poss. de Chuva a Noite';
  if (sigla = 'nct') then
  Result := 'Nublado com Poss. de Chuva a Tarde';
  if (sigla = 'ncm') then
  Result := 'Nubl. c/ Poss. de Chuva pela Manhã';
  if (sigla = 'npm') then
  Result := 'Nublado com Pancadas pela Manhã';
  if (sigla = 'npp') then
  Result := 'Nublado com Possibilidade de Chuva'
    else
  if (sigla = 'vn') then
  Result := 'Variação de Nebulosidade'
    else
  if (sigla = 'ct') then
  Result := 'Chuva a Tarde'
    else
  if (sigla = 'ppn') then
  Result := 'Poss. de Panc. de Chuva a Noite'
    else
  if (sigla = 'ppt') then
  Result := 'Poss. de Panc. de Chuva a Tarde'
    else
  if (sigla = 'ppm') then
  Result := 'Poss. de Panc. de Chuva pela Manhã';



end;

procedure TForm1.atualizarDataHora;
begin

  StatusBar1.Panels[0].Text := DateToStr(Date) + ' ' + TimeToStr(now);

end;

procedure TForm1.baixarXML(codCidade : String);
var
  enderecoXML : String;
begin

 try
    xmlCidade := TMemoryStream.Create;
    enderecoXML := 'http://servicos.cptec.inpe.br/XML/cidade/'+ codCidade +'/previsao.xml';

    IdHTTP1.Get(enderecoXML, xmlCidade);


  finally
    IdHTTP1.Disconnect();
    //FreeAndNil(xmlCidade);
 end;



end;

procedure TForm1.carregarLocalidade;
var
I: Integer;
itemList : TListItem;
begin

    try
        //fileXMLLocal := TFileStream.Create(ExtractFilePath(Application.ExeName)+'localidade.xml', fmOpenRead);
        xmlCidades := TMemoryStream.Create;
        IdHTTP1.Get('http://servicos.cptec.inpe.br/XML/listaCidades?city='+SearchBox1.Text, xmlCidades);

        XMLDocument1.LoadFromStream(xmlCidades,TXMLEncodingType.xetUTF_8);

        ListView1.Clear;
        for I := 0 to XMLDocument1.DocumentElement.ChildNodes.Count - 1 do
        begin
          itemList := ListView1.Items.Add;
          itemList.Caption := XMLDocument1.DocumentElement.ChildNodes[I].ChildNodes['id'].Text;
          itemList.SubItems.Add(XMLDocument1.DocumentElement.ChildNodes[I].ChildNodes['nome'].Text);
          itemList.SubItems.Add(XMLDocument1.DocumentElement.ChildNodes[I].ChildNodes['uf'].Text);
        end;

    finally
        IdHTTP1.Disconnect();
        FreeAndNil(fileXMLLocal);
        ListView1.Visible := true;
    end;

end;

procedure TForm1.carregarXML;
var
I : Integer;
dtStr, dtAtualizacao, condicao : string;

begin
     XMLDocument1.LoadFromStream(xmlCidade, TXMLEncodingType.xetUTF_8);
    // XMLDocument1.Active := True;
     cidadeUF := XMLDocument1.DocumentElement.ChildValues['nome'] + ' - ' + XMLDocument1.DocumentElement.ChildValues['uf'];
     Label17.Caption := cidadeUF;
     Self.Caption := 'Previsão para os próximos 4 dias em: ' + cidadeUF;
     dtAtualizacao := XMLDocument1.DocumentElement.ChildValues['atualizacao'];
     //label17.Caption := 'Atualizado em: ' + copy(dtAtualizacao,9,2)+'/'+copy(dtAtualizacao,6,2)+'/'+copy(dtAtualizacao,0,4) + ' às ' + TimeToStr(now());

     StatusBar1.Panels[1].Text := 'Atualizado em: ' + copy(dtAtualizacao,9,2)+'/'+copy(dtAtualizacao,6,2)+'/'+copy(dtAtualizacao,0,4) + ' às ' + TimeToStr(now());

     for I := 0 to XMLDocument1.DocumentElement.ChildNodes.Count - 1 do
      begin
                     //2017-05-09
         if (I = 3) then
          begin
            dtStr := XMLDocument1.DocumentElement.ChildNodes[I].ChildNodes['dia'].Text;
            dtStr := copy(dtStr,9,2)+'/'+copy(dtStr,6,2)+'/'+copy(dtStr,0,4);
            grp1.Caption := 'Previsão para : ' + retornarDiaDaSemana(dtStr) + ' - ' + dtStr;
            img1.Picture.LoadFromFile('imgs\'+XMLDocument1.DocumentElement.ChildNodes[I].ChildNodes['tempo'].Text + '.png');
            Label1.Caption := retornaCondicao(XMLDocument1.DocumentElement.ChildNodes[I].ChildNodes['tempo'].Text);
            Label2.Caption := 'Máxima: ' + XMLDocument1.DocumentElement.ChildNodes[I].ChildNodes['maxima'].Text;
            Label3.Caption := 'Mínima: ' + XMLDocument1.DocumentElement.ChildNodes[I].ChildNodes['minima'].Text;
            Label4.Caption := 'Índice UV: ' + XMLDocument1.DocumentElement.ChildNodes[I].ChildNodes['iuv'].Text;
          end;

          if (I = 4) then
          begin
            dtStr := XMLDocument1.DocumentElement.ChildNodes[I].ChildNodes['dia'].Text;
            dtStr := copy(dtStr,9,2)+'/'+copy(dtStr,6,2)+'/'+copy(dtStr,0,4);
            grp2.Caption := 'Previsão para : ' + retornarDiaDaSemana(dtStr) + ' - ' + dtStr;
            img2.Picture.LoadFromFile('imgs\'+XMLDocument1.DocumentElement.ChildNodes[I].ChildNodes['tempo'].Text + '.png');
            Label5.Caption :=  retornaCondicao(XMLDocument1.DocumentElement.ChildNodes[I].ChildNodes['tempo'].Text);
            Label6.Caption := 'Máxima: ' + XMLDocument1.DocumentElement.ChildNodes[I].ChildNodes['maxima'].Text;
            Label7.Caption := 'Mínima: ' + XMLDocument1.DocumentElement.ChildNodes[I].ChildNodes['minima'].Text;
            Label8.Caption := 'Índice UV: ' + XMLDocument1.DocumentElement.ChildNodes[I].ChildNodes['iuv'].Text;
          end;

          if (I = 5) then
          begin
            dtStr := XMLDocument1.DocumentElement.ChildNodes[I].ChildNodes['dia'].Text;
            dtStr := copy(dtStr,9,2)+'/'+copy(dtStr,6,2)+'/'+copy(dtStr,0,4);
            grp3.Caption := 'Previsão para : ' + retornarDiaDaSemana(dtStr) + ' - ' + dtStr;
            img3.Picture.LoadFromFile('imgs\'+XMLDocument1.DocumentElement.ChildNodes[I].ChildNodes['tempo'].Text + '.png');
            Label9.Caption :=  retornaCondicao(XMLDocument1.DocumentElement.ChildNodes[I].ChildNodes['tempo'].Text);
            Label10.Caption := 'Máxima: ' + XMLDocument1.DocumentElement.ChildNodes[I].ChildNodes['maxima'].Text;
            Label11.Caption := 'Mínima: ' + XMLDocument1.DocumentElement.ChildNodes[I].ChildNodes['minima'].Text;
            Label12.Caption := 'Índice UV: ' + XMLDocument1.DocumentElement.ChildNodes[I].ChildNodes['iuv'].Text;
          end;


          if (I = 6) then
          begin
            dtStr := XMLDocument1.DocumentElement.ChildNodes[I].ChildNodes['dia'].Text;
            dtStr := copy(dtStr,9,2)+'/'+copy(dtStr,6,2)+'/'+copy(dtStr,0,4);
            grp4.Caption := 'Previsão para : ' + retornarDiaDaSemana(dtStr) + ' - ' + dtStr;
            img4.Picture.LoadFromFile('imgs\'+XMLDocument1.DocumentElement.ChildNodes[I].ChildNodes['tempo'].Text + '.png');
            Label13.Caption :=  retornaCondicao(XMLDocument1.DocumentElement.ChildNodes[I].ChildNodes['tempo'].Text);
            Label14.Caption := 'Máxima: ' + XMLDocument1.DocumentElement.ChildNodes[I].ChildNodes['maxima'].Text;
            Label15.Caption := 'Mínima: ' + XMLDocument1.DocumentElement.ChildNodes[I].ChildNodes['minima'].Text;
            Label16.Caption := 'Índice UV: ' + XMLDocument1.DocumentElement.ChildNodes[I].ChildNodes['iuv'].Text;
          end;

      end;

end;

procedure TForm1.FormShow(Sender: TObject);
var
StyleName: string;
begin
  baixarXML('242');
  carregarXML();

  atualizarDataHora();


  for StyleName in TStyleManager.StyleNames do
    ComboBox1.Items.Add(StyleName);

  ComboBox1.ItemIndex := ComboBox1.Items.IndexOf(TStyleManager.ActiveStyle.Name);


end;

procedure TForm1.Image1Click(Sender: TObject);
begin
   if (sv.Opened) then
    begin
      sv.Close;
    end
    else
    begin
      sv.Open;
    end;
end;

procedure TForm1.Image2Click(Sender: TObject);
begin
 // baixarXML('242');
  carregarXML();
end;

procedure TForm1.ListView1SelectItem(Sender: TObject; Item: TListItem;
  Selected: Boolean);
begin
    baixarXML(Item.Caption);
    carregarXML();

    ListView1.Clear;
    sv.Close;
    SearchBox1.Clear;
    ListView1.Visible := false;
end;

procedure TForm1.SearchBox1InvokeSearch(Sender: TObject);
begin
   carregarLocalidade();
end;

end.
